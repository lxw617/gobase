// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: hello/hello_grpc.proto

package hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloGrpcClient is the client API for HelloGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloGrpcClient interface {
	Search(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	SearchIn(ctx context.Context, opts ...grpc.CallOption) (HelloGrpc_SearchInClient, error)
	SearchOut(ctx context.Context, in *Req, opts ...grpc.CallOption) (HelloGrpc_SearchOutClient, error)
	SearchIO(ctx context.Context, opts ...grpc.CallOption) (HelloGrpc_SearchIOClient, error)
}

type helloGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloGrpcClient(cc grpc.ClientConnInterface) HelloGrpcClient {
	return &helloGrpcClient{cc}
}

func (c *helloGrpcClient) Search(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/hello_grpc.HelloGrpc/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloGrpcClient) SearchIn(ctx context.Context, opts ...grpc.CallOption) (HelloGrpc_SearchInClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloGrpc_ServiceDesc.Streams[0], "/hello_grpc.HelloGrpc/SearchIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloGrpcSearchInClient{stream}
	return x, nil
}

type HelloGrpc_SearchInClient interface {
	Send(*Req) error
	CloseAndRecv() (*Res, error)
	grpc.ClientStream
}

type helloGrpcSearchInClient struct {
	grpc.ClientStream
}

func (x *helloGrpcSearchInClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloGrpcSearchInClient) CloseAndRecv() (*Res, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloGrpcClient) SearchOut(ctx context.Context, in *Req, opts ...grpc.CallOption) (HelloGrpc_SearchOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloGrpc_ServiceDesc.Streams[1], "/hello_grpc.HelloGrpc/SearchOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloGrpcSearchOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloGrpc_SearchOutClient interface {
	Recv() (*Res, error)
	grpc.ClientStream
}

type helloGrpcSearchOutClient struct {
	grpc.ClientStream
}

func (x *helloGrpcSearchOutClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloGrpcClient) SearchIO(ctx context.Context, opts ...grpc.CallOption) (HelloGrpc_SearchIOClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloGrpc_ServiceDesc.Streams[2], "/hello_grpc.HelloGrpc/SearchIO", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloGrpcSearchIOClient{stream}
	return x, nil
}

type HelloGrpc_SearchIOClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type helloGrpcSearchIOClient struct {
	grpc.ClientStream
}

func (x *helloGrpcSearchIOClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloGrpcSearchIOClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloGrpcServer is the server API for HelloGrpc service.
// All implementations must embed UnimplementedHelloGrpcServer
// for forward compatibility
type HelloGrpcServer interface {
	Search(context.Context, *Req) (*Res, error)
	SearchIn(HelloGrpc_SearchInServer) error
	SearchOut(*Req, HelloGrpc_SearchOutServer) error
	SearchIO(HelloGrpc_SearchIOServer) error
	mustEmbedUnimplementedHelloGrpcServer()
}

// UnimplementedHelloGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedHelloGrpcServer struct {
}

func (UnimplementedHelloGrpcServer) Search(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedHelloGrpcServer) SearchIn(HelloGrpc_SearchInServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchIn not implemented")
}
func (UnimplementedHelloGrpcServer) SearchOut(*Req, HelloGrpc_SearchOutServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchOut not implemented")
}
func (UnimplementedHelloGrpcServer) SearchIO(HelloGrpc_SearchIOServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchIO not implemented")
}
func (UnimplementedHelloGrpcServer) mustEmbedUnimplementedHelloGrpcServer() {}

// UnsafeHelloGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloGrpcServer will
// result in compilation errors.
type UnsafeHelloGrpcServer interface {
	mustEmbedUnimplementedHelloGrpcServer()
}

func RegisterHelloGrpcServer(s grpc.ServiceRegistrar, srv HelloGrpcServer) {
	s.RegisterService(&HelloGrpc_ServiceDesc, srv)
}

func _HelloGrpc_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloGrpcServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello_grpc.HelloGrpc/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloGrpcServer).Search(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloGrpc_SearchIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloGrpcServer).SearchIn(&helloGrpcSearchInServer{stream})
}

type HelloGrpc_SearchInServer interface {
	SendAndClose(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type helloGrpcSearchInServer struct {
	grpc.ServerStream
}

func (x *helloGrpcSearchInServer) SendAndClose(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloGrpcSearchInServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloGrpc_SearchOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Req)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloGrpcServer).SearchOut(m, &helloGrpcSearchOutServer{stream})
}

type HelloGrpc_SearchOutServer interface {
	Send(*Res) error
	grpc.ServerStream
}

type helloGrpcSearchOutServer struct {
	grpc.ServerStream
}

func (x *helloGrpcSearchOutServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloGrpc_SearchIO_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloGrpcServer).SearchIO(&helloGrpcSearchIOServer{stream})
}

type HelloGrpc_SearchIOServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type helloGrpcSearchIOServer struct {
	grpc.ServerStream
}

func (x *helloGrpcSearchIOServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloGrpcSearchIOServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloGrpc_ServiceDesc is the grpc.ServiceDesc for HelloGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello_grpc.HelloGrpc",
	HandlerType: (*HelloGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _HelloGrpc_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchIn",
			Handler:       _HelloGrpc_SearchIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SearchOut",
			Handler:       _HelloGrpc_SearchOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchIO",
			Handler:       _HelloGrpc_SearchIO_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello/hello_grpc.proto",
}
